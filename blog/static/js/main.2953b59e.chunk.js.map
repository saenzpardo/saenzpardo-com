{"version":3,"sources":["components/BlogPostLayout.module.css","components/Pagination.module.css","utils/formats.js","components/ArticleMeta.js","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","siteMetadata.js","components/Bio.js","utils/getGravatarURL.js","components/Pagination.js","components/BlogIndexPage.js","components/NotFoundPage.js","components/LoadingIndicator.js","components/BlogLayout.js","components/BlogPostLayout.js","routes/posts/index.js","routes/index.js","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.js","components/ArticleSummary.module.css","components/Bio.module.css","serviceWorker.js","index.js"],"names":["module","exports","title","header","footer","bio","links","next","content","Pagination","previous","months","ArticleMeta","blogRoot","meta","readingTime","readingTimeElement","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","articlesList","siteMetadata","author","description","indexPageSize","Bio","props","photoURL","email","size","defaultURL","hash","md5","toLowerCase","trim","encodeURIComponent","getGravatarURL","src","alt","pageCount","pageNumber","dist_es","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","route","url","ArticleSummary","components_Pagination","target","style","float","NotFoundPage","NotFound","LoadingIndicator","active","BlogLayout","isViewingIndex","loadingRoute","useLoadingRoute","container","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_useCurrentRoute","useCurrentRoute","data","_useView","useView","connect","head","MDXComponent","pathname","esm","components","Link","wrapper","children","previousDetails","nextDetails","postModules","./2020-07-30-first-post/post.js","__webpack_require__","e","then","bind","./2020-08-03-strings/post.js","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","Navi","asyncToGenerator","regenerator_default","mark","_callee2","_yield$importPost","post","getContent","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","objectWithoutProperties","abrupt","getData","req","context","objectSpread2","getView","_getView","_callee","_yield$getContent","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","_ref","pageTitle","method","Promise","all","_ref2","resolve","routes","_x3","view","components_BlogIndexPage","_x","_x2","compose","withContext","mountpath","withView","path","test","components_BlogLayout","mount","/","shift","/page","/1","redirect","fromPairs","/posts","components_BlogPostLayout","/tags","lazy","/about","/rss","LoadingIndicator-animation","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","spoiler","Boolean","window","location","hostname","register","main","navigation","createBrowserNavigation","getRoute","process","renderer","ReactDOM","hydrate","react_navi_helmet_async_dist_es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2953b59e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__15Bnq\",\"header\":\"BlogPostLayout_header__3vH2M\",\"footer\":\"BlogPostLayout_footer__1lt81\",\"bio\":\"BlogPostLayout_bio__3xLZg\",\"links\":\"BlogPostLayout_links__D2bm2\",\"next\":\"BlogPostLayout_next__lv6ju\",\"content\":\"BlogPostLayout_content__2UzW5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__2pkLW\",\"previous\":\"Pagination_previous__hyO_x\",\"next\":\"Pagination_next__10BnO\"};","export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\nexport function formatDate(dateString) {\r\n  let date = new Date(dateString)\r\n  let monthName = months[date.getMonth()]\r\n  let dayOfMonth = date.getDate()\r\n  let fourDigitYear = date.getFullYear()\r\n\r\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\r\n}","import { join } from 'path'\r\nimport React from 'react'\r\nimport { Link } from 'react-navi'\r\nimport { formatDate } from '../utils/formats'\r\nimport styles from './ArticleMeta.module.css'\r\n\r\nfunction ArticleMeta({ blogRoot, meta, readingTime }) {\r\n  let readingTimeElement\r\n  if (readingTime) {\r\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\r\n    let cups = Math.round(minutes / 5);\r\n    readingTimeElement =\r\n      <React.Fragment>\r\n        {' '}&bull;{' '}\r\n        <span className={styles.readingTime}>\r\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\r\n        </span>\r\n      </React.Fragment>\r\n  }\r\n      \r\n  return (\r\n    <small className={styles.ArticleMeta}>\r\n      <time dateTime={meta.date.toUTCString()}>{formatDate(meta.date)}</time>\r\n      {\r\n        meta.tags &&\r\n        meta.tags.length &&\r\n        <>\r\n          {' '}&bull;{' '}\r\n          <ul className={styles.tags}>\r\n            {meta.tags.map(tag =>\r\n              <li key={tag}>\r\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\r\n              </li>\r\n            )}\r\n          </ul>\r\n        </>\r\n      }\r\n      {readingTimeElement || null}\r\n    </small>\r\n  )\r\n}\r\n\r\nexport default ArticleMeta","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__3uNHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__1RUjs\",\"articlesList\":\"BlogIndexPage_articlesList__3yCRZ\",\"footer\":\"BlogIndexPage_footer__3WkOw\"};","export default {\r\n  // The blog's title as it appears in the layout header, and in the document\r\n  // <title> tag.\r\n  title: \"Adam Saenzpardo's Blog on Tech and Life\",\r\n\r\n  author: \"J. Adam Saenzpardo\",\r\n  description: \"My Struggles With Turning a Hobby Into a Career\",\r\n\r\n  // The number of posts to a page on the site index.\r\n  indexPageSize: 10,\r\n}\r\n","import React from 'react'\r\nimport styles from './Bio.module.css'\r\nimport { getGravatarURL } from '../utils/getGravatarURL'\r\n\r\nfunction Bio(props) {\r\n  let photoURL = getGravatarURL({\r\n    email: \"saenzpardoa@gmail.com\",\r\n    size: 56,\r\n  })\r\n\r\n  return (\r\n    <div className={`\r\n      ${styles.Bio}\r\n      ${props.className || ''}\r\n    `}>\r\n      <img src={photoURL} alt=\"Me\" />\r\n      <p>\r\n        This is my first attempt at creating a place to \r\n        document my thoughts.\r\n        <br />\r\n        \"I'm new and I don't know what to do with my hands!!\" \r\n        <br />\r\n        Let me know what you think.\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import md5 from 'blueimp-md5'\r\n\r\nexport function getGravatarURL({ email, size, defaultURL = 'identicon' }) {\r\n  let hash = md5(email.toLowerCase().trim())\r\n  return `https://www.gravatar.com/avatar/${hash}.jpg?s=${size}&d=${encodeURIComponent(defaultURL)}`\r\n}\r\n","import { join } from 'path'\r\nimport React from 'react'\r\nimport { Link } from 'react-navi'\r\nimport styles from './Pagination.module.css'\r\n\r\nfunction Pagination({ blogRoot, pageCount, pageNumber }) {\r\n  return (\r\n    <small className={styles.Pagination}>\r\n      {\r\n        pageNumber !== 1 &&\r\n        <Link\r\n          className={styles.previous}\r\n          href={join(blogRoot, 'page', String(pageNumber - 1))}>\r\n          ← Previous\r\n        </Link>\r\n      }\r\n      <span className={styles.pages}>\r\n        {' '}Page <span className={styles.current}>{pageNumber}</span>/<span className={styles.count}>{pageCount}</span>{' '}\r\n      </span>\r\n      {\r\n        pageNumber < pageCount &&\r\n        <Link\r\n          className={styles.next}\r\n          href={join(blogRoot, 'page', String(pageNumber + 1))}>\r\n          Next →\r\n        </Link>\r\n      }\r\n    </small>\r\n  )\r\n}\r\n\r\nexport default Pagination","import React from 'react'\r\nimport { Link } from 'react-navi'\r\nimport siteMetadata from '../siteMetadata'\r\nimport ArticleSummary from './ArticleSummary'\r\nimport Bio from './Bio'\r\nimport Pagination from './Pagination'\r\nimport styles from './BlogIndexPage.module.css'\r\n\r\nfunction BlogIndexPage({ blogRoot, pageCount, pageNumber, postRoutes }) {\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1 className={styles.title}>\r\n          <Link href={blogRoot}>{siteMetadata.title}</Link>\r\n        </h1>\r\n        <Bio />\r\n      </header>\r\n      <ul className={styles.articlesList}>\r\n        {postRoutes.map(route => (\r\n          <li key={route.url.href}>\r\n            <ArticleSummary blogRoot={blogRoot} route={route} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {pageCount > 1 && (\r\n        <Pagination\r\n          blogRoot={blogRoot}\r\n          pageCount={pageCount}\r\n          pageNumber={pageNumber}\r\n        />\r\n      )}\r\n      <footer className={styles.footer}>\r\n        <div>\r\n          <a href=\"/rss.xml\" target=\"_blank\" style={{ float: 'right' }}>\r\n            RSS\r\n          </a>\r\n          <Link href=\"/about\">About</Link> &bull; <Link href=\"/tags\">Tags</Link>{' '}\r\n          &bull;{' '}\r\n          <a href=\"https://github.com/saenzpardo\">My GitHub</a>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BlogIndexPage\r\n","import React from 'react'\r\nimport styles from './NotFoundPage.module.css'\r\n\r\n// Note that create-react-navi-app will always show an error screen when this\r\n// is rendered. This is because the underlying react-scripts package shows\r\n// the error screen when a NotFoundError is thrown, even though it's caught\r\n// by <NotFoundBoundary>. To see the error rendered by this function,\r\n// you'll just need to close the error overlay with the \"x\" at the top right.\r\nfunction NotFoundPage() {\r\n  return (\r\n    <div className={styles.NotFound}>\r\n      <h1>404 - Not Found</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotFoundPage","import React from 'react'\r\nimport styles from './LoadingIndicator.module.css'\r\n\r\nfunction LoadingIndicator({ active, className, style }) {\r\n  return (\r\n    <div\r\n      className={`\r\n        ${styles.LoadingIndicator}\r\n        ${active ? styles.active : ''}\r\n        ${className}\r\n      `}\r\n      style={style}\r\n    />\r\n  )\r\n}\r\n\r\nexport default LoadingIndicator","import React from 'react'\r\nimport {\r\n  View,\r\n  Link,\r\n  NotFoundBoundary,\r\n  useLoadingRoute,\r\n} from 'react-navi'\r\nimport siteMetadata from '../siteMetadata'\r\nimport NotFoundPage from './NotFoundPage'\r\nimport LoadingIndicator from './LoadingIndicator'\r\nimport styles from './BlogLayout.module.css'\r\n\r\nfunction BlogLayout({ blogRoot, isViewingIndex }) {\r\n  let loadingRoute = useLoadingRoute()\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <LoadingIndicator active={!!loadingRoute} />\r\n\r\n      {// Don't show the header on index pages, as it has a special header.\r\n      !isViewingIndex && (\r\n        <header>\r\n          <h3 className={styles.title}>\r\n            <Link href={blogRoot}>{siteMetadata.title}</Link>\r\n          </h3>\r\n        </header>\r\n      )}\r\n\r\n      <main>\r\n        <NotFoundBoundary render={() => <NotFoundPage />}>\r\n          <View />\r\n        </NotFoundBoundary>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BlogLayout\r\n","import React from 'react'\r\nimport { Link, useCurrentRoute, useView } from 'react-navi'\r\nimport { MDXProvider } from '@mdx-js/react'\r\nimport siteMetadata from '../siteMetadata'\r\nimport ArticleMeta from './ArticleMeta'\r\nimport Bio from './Bio'\r\nimport styles from './BlogPostLayout.module.css'\r\n\r\nfunction BlogPostLayout({ blogRoot }) {\r\n  let { title, data, url } = useCurrentRoute()\r\n  let { connect, content, head } = useView()\r\n  let { MDXComponent, readingTime } = content\r\n\r\n  // The content for posts is an MDX component, so we'll need\r\n  // to use <MDXProvider> to ensure that links are rendered\r\n  // with <Link>, and thus use pushState.\r\n  return connect(\r\n    <>\r\n      {head}\r\n      <article className={styles.container}>\r\n        <header className={styles.header}>\r\n          <h1 className={styles.title}>\r\n            <Link href={url.pathname}>{title}</Link>\r\n          </h1>\r\n          <ArticleMeta\r\n            blogRoot={blogRoot}\r\n            meta={data}\r\n            readingTime={readingTime}\r\n          />\r\n        </header>\r\n        <MDXProvider components={{\r\n          a: Link,\r\n          wrapper: ({ children }) =>\r\n            <div className={styles.content}>\r\n              {children}\r\n            </div>\r\n        }}>\r\n          <MDXComponent />\r\n        </MDXProvider>\r\n        <footer className={styles.footer}>\r\n          <h3 className={styles.title}>\r\n            <Link href={blogRoot}>\r\n              {siteMetadata.title}\r\n            </Link>\r\n          </h3>\r\n          <Bio className={styles.bio} />\r\n          <section className={styles.links}>\r\n            {\r\n              data.previousDetails &&\r\n              <Link className={styles.previous} href={data.previousDetails.href}>\r\n                ← {data.previousDetails.title}\r\n              </Link>\r\n            }\r\n            {\r\n              data.nextDetails &&\r\n              <Link className={styles.next} href={data.nextDetails.href}>\r\n                {data.nextDetails.title} →\r\n              </Link>\r\n            }\r\n          </section>\r\n        </footer>\r\n      </article>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BlogPostLayout","import importAll from 'import-all.macro'\r\nimport * as Navi from 'navi'\r\nimport { join } from 'path'\r\nimport { sortBy } from 'lodash'\r\nimport slugify from 'slugify'\r\n\r\n// Get a list of all posts, that will not be loaded until the user\r\n// requests them.\r\nconst postModules = importAll.deferred('./**/post.js')\r\nconst importPost = pathname => postModules[pathname]()\r\nconst postPathnames = Object.keys(postModules)\r\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\r\n\r\nlet postDetails = postPathnames.map(pathname => {\r\n  let slug = slugify(\r\n    pathname.replace(/post.jsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\r\n  )\r\n    .replace(/^[-.]+|[.-]+$/g, '')\r\n    .replace(datePattern, '$1/')\r\n\r\n  let date\r\n  let dateMatch = slug.match(datePattern)\r\n  if (dateMatch) {\r\n    date = new Date(dateMatch[2], parseInt(dateMatch[3]) - 1, dateMatch[4])\r\n  }\r\n\r\n  return {\r\n    slug,\r\n    pathname,\r\n    date,\r\n  }\r\n})\r\n\r\n// Sort the pages by slug (which contain the dates)\r\npostDetails = sortBy(postDetails, ['slug']).reverse()\r\n\r\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\r\n// that can be used to load and return the post's Page object.\r\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\r\n  getPage: Navi.map(async () => {\r\n    let { default: post } = await importPost(pathname)\r\n    let { title, getContent, ...meta } = post\r\n    let previousSlug, previousPost, nextSlug, nextPost\r\n\r\n    if (i !== 0) {\r\n      let previousPostDetails = postDetails[i - 1]\r\n      previousPost = (await importPost(previousPostDetails.pathname)).default\r\n      previousSlug = previousPostDetails.slug\r\n    }\r\n\r\n    if (i + 1 < postDetails.length) {\r\n      let nextPostDetails = postDetails[i + 1]\r\n      nextPost = (await importPost(nextPostDetails.pathname)).default\r\n      nextSlug = nextPostDetails.slug\r\n    }\r\n\r\n    return Navi.route({\r\n      title,\r\n      getData: (req, context) => ({\r\n        date,\r\n        pathname,\r\n        slug,\r\n        previousDetails: previousPost && {\r\n          title: previousPost.title,\r\n          href: join(context.blogRoot, 'posts', previousSlug),\r\n        },\r\n        nextDetails: nextPost && {\r\n          title: nextPost.title,\r\n          href: join(context.blogRoot, 'posts', nextSlug),\r\n        },\r\n        ...meta,\r\n      }),\r\n      getView: async () => {\r\n        let { default: MDXComponent, ...other } = await getContent()\r\n        return { MDXComponent, ...other }\r\n      },\r\n    })\r\n  }),\r\n  slug,\r\n}))\r\n\r\nexport default posts\r\n","import {\r\n  compose,\r\n  lazy,\r\n  map,\r\n  mount,\r\n  redirect,\r\n  resolve,\r\n  route,\r\n  withContext,\r\n  withView,\r\n} from 'navi'\r\nimport React from 'react'\r\nimport { join } from 'path'\r\nimport { chunk, fromPairs } from 'lodash'\r\nimport BlogIndexPage from '../components/BlogIndexPage'\r\nimport BlogLayout from '../components/BlogLayout'\r\nimport BlogPostLayout from '../components/BlogPostLayout'\r\nimport siteMetadata from '../siteMetadata'\r\nimport posts from './posts'\r\n\r\n// Split the posts into a list of chunks of the given size, and\r\n// then build index pages for each chunk.\r\nlet chunks = chunk(posts, siteMetadata.indexPageSize)\r\nlet chunkPagePairs = chunks.map((chunk, i) => [\r\n  '/' + (i + 1),\r\n  map(async (req, context) => {\r\n    // Don't load anything when just crawling\r\n    if (req.method === 'HEAD') {\r\n      return route()\r\n    }\r\n\r\n    // Get metadata for all pages on this page\r\n    let postRoutes = await Promise.all(\r\n      chunk.map(async post => {\r\n        let href = join(context.blogRoot, 'posts', post.slug)\r\n        return await resolve({\r\n          // If you want to show the page content on the index page, set\r\n          // this to 'GET' to be able to access it.\r\n          method: 'HEAD',\r\n          routes,\r\n          url: href,\r\n        })\r\n      }),\r\n    )\r\n\r\n    // Only add a page number to the page title after the first index page.\r\n    let pageTitle = siteMetadata.title\r\n    if (i > 0) {\r\n      pageTitle += ` – page ${i + 1}`\r\n    }\r\n\r\n    return route({\r\n      title: pageTitle,\r\n      view: (\r\n        <BlogIndexPage\r\n          blogRoot={context.blogRoot}\r\n          pageNumber={i + 1}\r\n          pageCount={chunks.length}\r\n          postRoutes={postRoutes}\r\n        />\r\n      ),\r\n    })\r\n  }),\r\n])\r\n\r\nconst routes = compose(\r\n  withContext((req, context) => ({\r\n    ...context,\r\n    blogRoot: req.mountpath || '/',\r\n  })),\r\n  withView((req, context) => {\r\n    // Check if the current page is an index page by comparing the remaining\r\n    // portion of the URL's pathname with the index page paths.\r\n    let isViewingIndex = req.path === '/' || /^\\/page\\/\\d+$/.test(req.path)\r\n\r\n    // Render the application-wide layout\r\n    return (\r\n      <BlogLayout blogRoot={context.blogRoot} isViewingIndex={isViewingIndex} />\r\n    )\r\n  }),\r\n  mount({\r\n    // The blog's index pages go here. The first index page is mapped to the\r\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\r\n    // mapped to \"/page/n\".\r\n    '/': chunkPagePairs.shift()[1],\r\n    '/page': mount({\r\n      '/1': redirect((req, context) => context.blogRoot),\r\n      ...fromPairs(chunkPagePairs),\r\n    }),\r\n\r\n    // Put posts under \"/posts\", so that they can be wrapped with a\r\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\r\n    '/posts': compose(\r\n      withView((req, context) => (\r\n        <BlogPostLayout blogRoot={context.blogRoot} />\r\n      )),\r\n      mount(fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))),\r\n    ),\r\n\r\n    // Miscellaneous pages can be added directly to the root switch.\r\n    '/tags': lazy(() => import('./tags')),\r\n    '/about': lazy(() => import('./about')),\r\n\r\n    // Only the statically built copy of the RSS feed is intended to be opened,\r\n    // but the route is defined here so that the static renderer will pick it\r\n    // up.\r\n    '/rss': route(),\r\n  }),\r\n)\r\n\r\nexport default routes\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__BXz9Z\",\"active\":\"LoadingIndicator_active__1OwxD\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__25awj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__32Xhe\",\"title\":\"BlogLayout_title__2palc\"};","import React from 'react'\r\nimport { Link } from 'react-navi'\r\nimport ArticleMeta from './ArticleMeta'\r\nimport styles from './ArticleSummary.module.css'\r\n\r\nfunction ArticleSummary({ blogRoot, route }) {\r\n  return (\r\n    <article className={styles.ArticleSummary}>\r\n      <h2><Link href={route.url.href}>{route.title}</Link></h2>\r\n      <ArticleMeta blogRoot={blogRoot} meta={route.data} />\r\n      <p>{route.data.spoiler}</p>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default ArticleSummary","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__Dy8Xa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__3OPvt\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import register from \"navi-scripts/register\";\r\nimport { createBrowserNavigation } from \"navi\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Router } from \"react-navi\";\r\nimport HelmetProvider from \"react-navi-helmet-async\";\r\nimport \"./index.module.css\";\r\nimport routes from \"./routes\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// `register()` is responsible for exporting your app's pages and App\r\n// component to the static renderer, and for starting the app with the\r\n// `main()` function when running within a browser.\r\nregister({\r\n  // Specify the pages that navi-app should statically build, by passing in a\r\n  // Switch object.\r\n  routes,\r\n\r\n  // This will only be called when loading your app in the browser. It won't\r\n  // be called when performing static generation.\r\n  async main() {\r\n    let navigation = createBrowserNavigation({ routes });\r\n\r\n    // Wait until the navigation has loaded the page's content, or failed to do\r\n    // so. If you want to load other data in parallel while the initial page is\r\n    // loading, make sure to start loading before this line.\r\n    await navigation.getRoute();\r\n\r\n    // React requires that you call `ReactDOM.hydrate` if there is statically\r\n    // rendered content in the root element, but prefers us to call\r\n    // `ReactDOM.render` when it is empty.\r\n    let hasStaticContent = process.env.NODE_ENV === \"production\";\r\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render;\r\n\r\n    // Start react, passing in the current navigation state and\r\n    // rendering the top-level view.\r\n    renderer(\r\n      <HelmetProvider>\r\n        <Router navigation={navigation} />\r\n      </HelmetProvider>,\r\n      document.getElementById(\"root\")\r\n    )\r\n\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: http://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n  }\r\n});\r\n"],"sourceRoot":""}